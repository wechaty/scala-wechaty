package xcoin.blockchain.internal.tron


import org.bouncycastle.util.encoders.Hex
import org.junit.jupiter.api.{Assertions, Test}
import org.mockito.{ArgumentMatcher, ArgumentMatchers}
import org.mockito.ArgumentMatchers.any
import org.mockito.BDDMockito.`given`
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.boot.test.mock.mockito.MockBean
import org.tron.trident.api.GrpcAPI.BytesMessage
import org.tron.trident.api.ReactorWalletGrpc.ReactorWalletStub
import org.tron.trident.proto.Response
import reactor.core.publisher.Mono
import reactor.test.StepVerifier
import xcoin.blockchain.internal.tron.TronNodeClientTest.TestNileConfiguration

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE,
                classes=Array(classOf[TestNileConfiguration]))
class TNCTransactionSupportTest {
  @Autowired
  private val tronNodeClient:TronNodeClient = null
  @MockBean
  private val stub          : ReactorWalletStub = null

  @Test
  def test_getTransaction(): Unit = {
    def mockTransaction(id:String,result:String)= {
      given(stub.getTransactionInfoById(ArgumentMatchers.argThat(new ArgumentMatcher[BytesMessage]() {
        override def matches(t: BytesMessage): Boolean = {
          t != null && Hex.toHexString(t.getValue.toByteArray) == id
        }
      }))).willReturn {
        val message = Response.TransactionInfo.parseFrom(Hex.decode(result))
        Mono.just(message)
      }
    }

    val correctTransferUSDTTxnId = "dbcfdb635e6943f4deb7820164247538f5dfa6a6a494be38d689a6808fa755f6"
    mockTransaction(correctTransferUSDTTxnId,"0a20dbcfdb635e6943f4deb7820164247538f5dfa6a6a494be38d689a6808fa755f618ea9a901820f0cfa98ba3322a200000000000000000000000000000000000000000000000000000000000000000321541eca9bc828a3005b9a3b909f2cc5c2a54794de05f3a0d18d2e70120d2e70128da023801429e010a14eca9bc828a3005b9a3b909f2cc5c2a54794de05f1220ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef1220000000000000000000000000d132364a6570470e4226c47079a0fa558eb4c78c1220000000000000000000000000f1b119a3ec3df6b743df8b17166378229982888a1a2000000000000000000000000000000000000000000000000000000000004c5ec8")

    StepVerifier
      .create(tronNodeClient.transactionByHash(correctTransferUSDTTxnId))
      .assertNext{payload=>
        Assertions.assertTrue(payload.result.isSuccess)
        Assertions.assertEquals(correctTransferUSDTTxnId,payload.id)
        Assertions.assertEquals(50597226,payload.blockNumber)
        Assertions.assertEquals(346,payload.receipt.net_usage)
        Assertions.assertEquals(29650,payload.receipt.energy_usage_total)
      }.verifyComplete()

    val failTxnId = "959b9d3180c8dc4692a5c30288fdacfe3bf3966cb4f79e289b8cb20252a86a57"
    mockTransaction(failTxnId, "0a20959b9d3180c8dc4692a5c30288fdacfe3bf3966cb4f79e289b8cb20252a86a5710f29a930618cd98901820b0b6f38aa3322a6408c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000f5472616e73666572206661696c65640000000000000000000000000000000000321541e302e4e9802c45a47a94851a8715c816666be3763a15082a108a89c30518daa91e2081d92130e89150380248015216524556455254206f70636f64652065786563757465648a015a0a20de0572c7fb9639b50f9c9dec8a168a3c75f06593e61bd2c85290a24f49a96817121541e302e4e9802c45a47a94851a8715c816666be3761a1541e97e6ee12d3db8176242bb901fdb924cc938e2d922002a0463616c6c30018a015f0a20de70d816ad3c82b5b513b63e7375a32c5e84abc3635c0b885a5eb37822ed943d121541e302e4e9802c45a47a94851a8715c816666be3761a1541c6cf472e975ec0777c87c3fd4f705288dbae402622050880ade2042a0463616c6c30018a015a0a207b9cb5814e4f17c9afe3a6275cf23593ec8b223df74b81bd0bf420ed4b825c56121541c6cf472e975ec0777c87c3fd4f705288dbae40261a1541afadaa4971338f61dff125758b3ecc3f6c271f6822002a0463616c6c30018a015a0a2091ec5250c2411d60595138d59d5785a4121fb45dd027b763f03ea4abec414fbf121541c6cf472e975ec0777c87c3fd4f705288dbae40261a1541afadaa4971338f61dff125758b3ecc3f6c271f6822002a0463616c6c30018a015a0a202c9a3ff4927bb64c251b307719b6646212efce0e7da156cb1795f3085a3eabac121541c6cf472e975ec0777c87c3fd4f705288dbae40261a1541afadaa4971338f61dff125758b3ecc3f6c271f6822002a0463616c6c30018a015a0a20a5a6ab535c60baf53c33c68e553cefab53671b0e20785ea04b04b9cb9b7bebc6121541e302e4e9802c45a47a94851a8715c816666be3761a154170082243784dcdf3042034e7b044d6d342a9136022002a0463616c6c30018a015a0a20734aebdd3722048e15939aa04367047c68107cae9e2bc61a9187bb39bb336c87121541e302e4e9802c45a47a94851a8715c816666be3761a1541d212f1c19d020b34c6f0dd1da7aa73b40084cf2c22002a0463616c6c30018a015a0a204b4c2f97732ff2bd8e91c4f68f1b924b7038027406bb99dcb55d1eaaa3b67dde121541d212f1c19d020b34c6f0dd1da7aa73b40084cf2c1a1541583a56efa2dc2274c4da731a0794128b6796b07b22002a0463616c6c30018a015a0a20e559ba382f9249f8bf0dcc77b58f1bcf3ac2d46bba3c35029ab66a117756e5b6121541583a56efa2dc2274c4da731a0794128b6796b07b1a15418b3b78c704669b53c649db5e5289060e72dfe8ac22002a0463616c6c30018a015a0a204c68fa7496cd38dd6c49da853f0e2b20d5efd1b9fdf6f43f6d6c922292885727121541d212f1c19d020b34c6f0dd1da7aa73b40084cf2c1a1541afadaa4971338f61dff125758b3ecc3f6c271f6822002a0463616c6c30018a015a0a2000cfd103eed984310f6b52b0a3de9cd17caa615dcd4515d2357305d099430b0c121541d212f1c19d020b34c6f0dd1da7aa73b40084cf2c1a15418b3b78c704669b53c649db5e5289060e72dfe8ac22002a0463616c6c30018a015a0a2047a375855b28f250c146b674c8f1c729c5d86f16006348f610094a8056f06cdb121541d212f1c19d020b34c6f0dd1da7aa73b40084cf2c1a1541583a56efa2dc2274c4da731a0794128b6796b07b22002a0463616c6c30018a015a0a203a125faa41f9b1e300023ee604833f964f9fe135bc9e9da16f0981a162a355e2121541583a56efa2dc2274c4da731a0794128b6796b07b1a15418b3b78c704669b53c649db5e5289060e72dfe8ac22002a0463616c6c30018a015a0a2053cce1eb013cbca4a7f409ee85ca47d4cb9c0a40b2e567db19a70f5136f5e60e121541583a56efa2dc2274c4da731a0794128b6796b07b1a1541afadaa4971338f61dff125758b3ecc3f6c271f6822002a0463616c6c30018a015a0a20e2f4fdc69123192ceac5bea4b952076b012d9bbcef5ead0182ee0523df51cd9a121541583a56efa2dc2274c4da731a0794128b6796b07b1a15418b3b78c704669b53c649db5e5289060e72dfe8ac22002a0463616c6c30018a015a0a205235aa1fc7af6486259b48a2bfe05c491c90510f3a0c51f844f71bec51153676121541d212f1c19d020b34c6f0dd1da7aa73b40084cf2c1a15418b3b78c704669b53c649db5e5289060e72dfe8ac22002a0463616c6c30018a015a0a2017e85a272c39d7aca0ccb83a39df226283f0183e782104c1b73d16870a9a877b121541d212f1c19d020b34c6f0dd1da7aa73b40084cf2c1a154170082243784dcdf3042034e7b044d6d342a9136022002a0463616c6c30018a015a0a20f81af9bfe68d61a9d0db0d4ff30d38a8083777355106b0d8577038e689d83d63121541e302e4e9802c45a47a94851a8715c816666be3761a154170082243784dcdf3042034e7b044d6d342a9136022002a0463616c6c30018a015a0a2054c24ef99412a51457cfda75e2b2ca5ab55789a4136bd0a11bc962829588ccff121541e302e4e9802c45a47a94851a8715c816666be3761a1541eca9bc828a3005b9a3b909f2cc5c2a54794de05f22002a0463616c6c30018a015a0a20c5a6b90d13a4245edf3bc4b6c3ccaa0a0d7cbf3ece87b43bd698c7179df89745121541e302e4e9802c45a47a94851a8715c816666be3761a154159b95177aae8b57cd027353ffb4d691c8fbdf41d22002a0463616c6c30018a015a0a20e72211e6cdd5e96ed56f5d2961673efa3d38f5649137df67e62faf612ddf984812154159b95177aae8b57cd027353ffb4d691c8fbdf41d1a1541dcd62a5bbd128591a5c5cbf33e0d3dd13363958922002a0463616c6c30018a015a0a202a0e44844aa7326a601a3a01509c8c001f369b8f029bd80343de2a9a84a03867121541dcd62a5bbd128591a5c5cbf33e0d3dd1336395891a1541579acb91f687ff470a91deca88728dc661ddf5ce22002a0463616c6c30018a015a0a20631a85a6c0c7743727cb66a134b9a72cc9d2b0e914e3331df81e75d4899f21ef12154159b95177aae8b57cd027353ffb4d691c8fbdf41d1a154170082243784dcdf3042034e7b044d6d342a9136022002a0463616c6c30018a015a0a2089477bc3d46ca7b463ce99ee6f9e19bfed188f86cda4683ae91d7cc089e21a7a12154159b95177aae8b57cd027353ffb4d691c8fbdf41d1a1541eca9bc828a3005b9a3b909f2cc5c2a54794de05f22002a0463616c6c30018a015a0a2091dc85ab81dbbc498521201f2c3761f31fd88862022f58bdf199eb5a8deb8b4812154159b95177aae8b57cd027353ffb4d691c8fbdf41d1a1541dcd62a5bbd128591a5c5cbf33e0d3dd13363958922002a0463616c6c30018a015a0a2005a03628668180ae3cbf9bb811c2613359bdc4473ce60c49a8f402e9ef5adeb9121541dcd62a5bbd128591a5c5cbf33e0d3dd1336395891a154170082243784dcdf3042034e7b044d6d342a9136022002a0463616c6c30018a015a0a209d1dffcdd9762913828bca218570ae8358969379bcbe61d02a6a3b1acd30e500121541dcd62a5bbd128591a5c5cbf33e0d3dd1336395891a1541eca9bc828a3005b9a3b909f2cc5c2a54794de05f22002a0463616c6c30018a015a0a2000644d55b63afcb2e4377c9cc277cb1c8124e8a5601bb86130b5ce6ece40ba1e12154159b95177aae8b57cd027353ffb4d691c8fbdf41d1a1541eca9bc828a3005b9a3b909f2cc5c2a54794de05f22002a0463616c6c30018a015a0a20ba01f4ac5be9bd98c02926a9ece30a5fb609219401908139d3c5985cf48aa9a112154159b95177aae8b57cd027353ffb4d691c8fbdf41d1a1541eca9bc828a3005b9a3b909f2cc5c2a54794de05f22002a0463616c6c30018a015a0a205f333359566e509e77d02c74d0fd2cc8884e4f9a49d70f039f2d886bb68d4864121541e302e4e9802c45a47a94851a8715c816666be3761a1541eca9bc828a3005b9a3b909f2cc5c2a54794de05f22002a0463616c6c30018a015a0a20bd578e59b352a005246619692d02b855f7d2c914fd9589e25ad49714bbb83d84121541e302e4e9802c45a47a94851a8715c816666be3761a1541eca9bc828a3005b9a3b909f2cc5c2a54794de05f22002a0463616c6c30018a015a0a200c07093fc1d7ca1a788e6c6f81402f16a9c119c5bd741d8f80ee2a6977c86172121541e302e4e9802c45a47a94851a8715c816666be3761a1541eca9bc828a3005b9a3b909f2cc5c2a54794de05f22002a0463616c6c3001d801f29a9306")

    StepVerifier
      .create(tronNodeClient.transactionByHash(failTxnId))
      .assertNext { payload =>
        Assertions.assertTrue(payload.result.isFailure)
        Assertions.assertEquals(failTxnId, payload.id)
        Assertions.assertEquals(50596941, payload.blockNumber)
        Assertions.assertEquals(0, payload.receipt.net_usage)
        Assertions.assertEquals(552065, payload.receipt.energy_usage_total)
        Assertions.assertEquals(42, payload.receipt.energy_usage)
      }.verifyComplete()

    val emptyTxnId= "123456"
    mockTransaction(emptyTxnId, "")
    StepVerifier
      .create(tronNodeClient.transactionByHash(emptyTxnId))
      .assertNext { payload =>
        Assertions.assertTrue(payload.result.isFailure)
      }.verifyComplete()

  }
}
